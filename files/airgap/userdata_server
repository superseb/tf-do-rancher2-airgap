#!/bin/bash
set -x
export curlimage=${prefix}-registry.${domain}:5000/appropriate/curl
export jqimage=${prefix}-registry.${domain}:5000/stedolan/jq

while ! nc -z ${proxy_address} 3128; do sleep 0.1; done
echo "Acquire::http::Proxy \"http://${proxy_address}:3128\";" > /etc/apt/apt.conf.d/02proxy
echo "proxy = ${proxy_address}:3128" > ~/.curlrc
echo "noproxy = 127.0.0.1,localhost,169.254.169.254" >> ~/.curlrc
curl https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
echo '{"insecure-registries": ["${prefix}-registry.${domain}:5000"]}' > /etc/docker/daemon.json
service docker restart

if [ "${registry_auth}" = "true" ]; then
  while [ ! -f /root/.docker/config.json ]; do echo testpassword | docker login --username=testuser --password-stdin ${prefix}-registry.${domain}:5000; sleep 5; done
else
  while true; do if [ `curl --noproxy '*' -sk https://${prefix}-registry.${domain}:5000/v2/` ]; then break; else sleep 5; echo "waiting on registry"; fi; done
fi

if [ `command -v curl` ]; then
  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
elif [ `command -v wget` ]; then
  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
fi

for image in $curlimage $jqimage; do
  until docker inspect $image > /dev/null 2>&1; do
    docker pull $image
    sleep 2
  done
done

until docker inspect ${prefix}-registry.${domain}:5000/rancher/rancher:${rancher_version} > /dev/null 2>&1; do
  docker pull ${prefix}-registry.${domain}:5000/rancher/rancher:${rancher_version}
  sleep 2
done
docker run -d --privileged -p 80:80 -p 443:443 -e HTTP_PROXY="http://${proxy_address}:3128" -e HTTPS_PROXY="http://${proxy_address}:3128" -e NO_PROXY="localhost,127.0.0.1,0.0.0.0,10.0.0.0/8,172.16.0.0/16,192.168.0.0/24,${cluster_addresses},${domain}" -e CATTLE_SERVER_URL=https://${prefix}-rancherprivate.${domain} -e CATTLE_SYSTEM_DEFAULT_REGISTRY=${prefix}-registry.${domain}:5000 ${prefix}-registry.${domain}:5000/rancher/rancher:${rancher_version} ${rancher_args}

while true; do
  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping && sleep 10 && break
  sleep 5
done

# Login
while true; do

    LOGINRESPONSE=$(docker run \
        --rm \
        --net=host \
        $curlimage \
        -s "https://127.0.0.1/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"admin"}' --insecure)
    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)

    if [ "$LOGINTOKEN" != "null" ]; then
        break
    else
        sleep 5
    fi
done

# Change password
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"admin","newPassword":"${admin_password}"}' --insecure

# Create API key
APIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure)

# Extract and store token
APITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`

# Check for available k8s versions if not specifically set
if [ -z "${k8s_version}" ]; then
    while true; do
        K8SVERSIONRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/k8s-version' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
        K8SVERSION=$(echo $K8SVERSIONRESPONSE | docker run --rm -i $jqimage -r .value)
        echo "K8SVERSION: "$K8SVERSION""

        if [ "$K8SVERSION" != "" ]; then
            break
        else
            sleep 5
        fi
    done
else
    K8SVERSION="${k8s_version}"
fi

# Create cluster
if [ "${registry_auth}" = "true" ]; then
  CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"/var/lib/docker","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"kubernetesVersion":"${k8s_version}","addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"creation":"12h","extraArgs":{"heartbeat-interval":500,"election-timeout":5000},"retention":"72h","snapshot":false,"type":"etcdService","backupConfig":{"enabled":true,"intervalHours":12,"retention":6,"type":"backupConfig"}}},"privateRegistries":[{"isDefault":true,"type":"privateRegistry","url":"${prefix}-registry.${domain}:5000","user":"testuser","password":"testpassword"}]},"localClusterAuthEndpoint":{"enabled":true,"type":"localClusterAuthEndpoint"},"name":"${cluster_name}"}' --insecure)
else
  CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"/var/lib/docker","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"kubernetesVersion":"${k8s_version}","addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"creation":"12h","extraArgs":{"heartbeat-interval":500,"election-timeout":5000},"retention":"72h","snapshot":false,"type":"etcdService","backupConfig":{"enabled":true,"intervalHours":12,"retention":6,"type":"backupConfig"}}}},"localClusterAuthEndpoint":{"enabled":true,"type":"localClusterAuthEndpoint"},"name":"${cluster_name}"}' --insecure)
fi
# Extract clusterid to use for generating the docker run command
CLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`

# Generate registrationtoken
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure
